{"ast":null,"code":"import _objectSpread from\"C:/Users/HP HOUSE/covid19-react-capstone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/HP HOUSE/covid19-react-capstone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/HP HOUSE/covid19-react-capstone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getContinent,getCountry}from'./Api';var LOAD_CONTINENT='covid-19-data-tracker/details/LOAD_CONTINENT';var LOAD_COUNTRY='covid-19-data-tracker/details/LOAD_COUNTRY';var FILTER_DATA='covid-19-data-tracker/details/FILTER_DATA';var initialState=[];export var loadContinent=function loadContinent(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var continent,countries;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getContinent();case 2:continent=_context.sent;countries=Object.values(continent);if(countries){dispatch({type:LOAD_CONTINENT,payload:countries});}case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var loadCountry=function loadCountry(name){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var countryData,country;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getCountry(name);case 2:countryData=_context2.sent;country=Object.values(countryData)[0];if(country){dispatch({type:LOAD_COUNTRY,payload:country});}case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};var filterNumbers=function filterNumbers(countries,value){switch(value){case'99999':return countries.filter(function(country){return country.All.confirmed<100000;});case'100000':return countries.filter(function(country){return country.All.confirmed>=100000&&country.All.confirmed<200000;});case'200000':return countries.filter(function(country){return country.All.confirmed>=200000&&country.All.confirmed<300000;});case'300000':return countries.filter(function(country){return country.All.confirmed>=300000;});default:return countries;}};export var filterCountry=function filterCountry(value){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var continent,countries,filteredCountry;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getContinent();case 2:continent=_context3.sent;countries=Object.values(continent);filteredCountry=filterNumbers(countries,value);if(filteredCountry){dispatch({type:FILTER_DATA,payload:filteredCountry});}case 6:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};var countriesReducer=function countriesReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case LOAD_CONTINENT:return{continent:action.payload};case LOAD_COUNTRY:return _objectSpread(_objectSpread({},state),{},{current_country:action.payload});case FILTER_DATA:return{continent:action.payload};default:return state;}};export default countriesReducer;","map":{"version":3,"sources":["C:/Users/HP HOUSE/covid19-react-capstone/src/redux/countries/countries.js"],"names":["getContinent","getCountry","LOAD_CONTINENT","LOAD_COUNTRY","FILTER_DATA","initialState","loadContinent","dispatch","continent","countries","Object","values","type","payload","loadCountry","name","countryData","country","filterNumbers","value","filter","All","confirmed","filterCountry","filteredCountry","countriesReducer","state","action","current_country"],"mappings":"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","sourcesContent":["import { getContinent, getCountry } from './Api';\n\nconst LOAD_CONTINENT = 'covid-19-data-tracker/details/LOAD_CONTINENT';\nconst LOAD_COUNTRY = 'covid-19-data-tracker/details/LOAD_COUNTRY';\nconst FILTER_DATA = 'covid-19-data-tracker/details/FILTER_DATA';\n\nconst initialState = [];\n\nexport const loadContinent = () => async (dispatch) => {\n  const continent = await getContinent();\n  const countries = Object.values(continent);\n\n  if (countries) {\n    dispatch({\n      type: LOAD_CONTINENT,\n      payload: countries,\n    });\n  }\n};\n\nexport const loadCountry = (name) => async (dispatch) => {\n  const countryData = await getCountry(name);\n  const country = Object.values(countryData)[0];\n\n  if (country) {\n    dispatch({\n      type: LOAD_COUNTRY,\n      payload: country,\n    });\n  }\n};\n\nconst filterNumbers = (countries, value) => {\n  switch (value) {\n    case '99999':\n      return countries.filter((country) => country.All.confirmed < 100000);\n    case '100000':\n      return countries.filter((country) => country.All.confirmed >= 100000\n        && country.All.confirmed < 200000);\n    case '200000':\n      return countries.filter((country) => country.All.confirmed >= 200000\n        && country.All.confirmed < 300000);\n    case '300000':\n      return countries.filter((country) => country.All.confirmed >= 300000);\n    default:\n      return countries;\n  }\n};\n\nexport const filterCountry = (value) => async (dispatch) => {\n  const continent = await getContinent();\n  const countries = Object.values(continent);\n  const filteredCountry = filterNumbers(countries, value);\n\n  if (filteredCountry) {\n    dispatch({\n      type: FILTER_DATA,\n      payload: filteredCountry,\n    });\n  }\n};\n\nconst countriesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_CONTINENT:\n      return { continent: action.payload };\n    case LOAD_COUNTRY:\n      return {\n        ...state,\n        current_country: action.payload,\n      };\n    case FILTER_DATA:\n      return { continent: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default countriesReducer;\n"]},"metadata":{},"sourceType":"module"}